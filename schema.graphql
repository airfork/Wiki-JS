type User {
    username: String!
    admin: Boolean!
}

type NewUser {
    username: String!
    admin: Boolean!
    token: String!
}

type PageImage {
    id: ID!
    fileInfo: File!
    url: String!
}

type Page {
    title: String!
    contents: String!
    createdAt: String!
    updatedAt: String!
    contributors: [User]!
    categories: [Tags]
    images: [PageImage]
}

type Tags {
    category: String!
}

"""Representation of an image in the database"""
type Image {
    id: ID!
    fileInfo: File!
    """The pages attached to this image"""
    pages: [Page]!
    """The URL used to access this image"""
    url: String!
}

type File {
    filename: String!
    mimetype: String!
    encoding: String!
}

type Query {
    getPage(title: String!): Page
    getCurrentUser: User
    getUsers: [User]!
    getImages: [Image]!
    getImage(id: ID!): Image
    getPages: [Page]!
}

scalar Upload

"""Input to create a new user"""
input UserInput {
    """Name used for logging in"""
    username: String!
    """Password used for logging in"""
    password: String!
}

"""Input for a tag associated with a page"""
input TagsInput {
    """The category for the tag, e.g. (character, location, etc.)"""
    category: String!
}

"""Input to create a page"""
input PageInput {
    """The title of the page"""
    title: String!
    """The actual contents of the page, in any form but likely HTML"""
    contents: String!
    """The categories that this page falls under"""
    categories: [TagsInput!]
    """List of image IDs that are associated with this page"""
    imageIds: [ID!]
}

type Mutation {
    createPage(page: PageInput!): Page
    createImage(image: Upload!): Image
    createUser(user: UserInput!): NewUser
    deletePage(title: String!): Page
    deleteUser(username: String!): User
    updatePage(page: PageInput!): Page
    logIn(username: String!, password: String!): String!
    makeAdmin(username: String!): User
}